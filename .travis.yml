dist: xenial

# addons:
  # apt:
    # packages:
      # - google-chrome-stable

language: python


compiler: g++


python:
  - 3.6


env:
  global:
    - TRAVIS_CI=true
    - PYTHONPATH=$(pwd)
    - COVERAGE_PROCESS_START="$(pwd)/tox.ini"


cache:
  directories:
    - $HOME/.cache/pip


jobs:
  include:
    - stage: "Tests"
      name: "Lint"
      install:
        - pip install flake8
      script:
        - make lint-local

    - name: "pipenv check"
      install:
        - pip install pipenv
      script:
        # `pipenv check` is occasionally flaky and depends on network connectivity,
        # so try up to 3 times, waiting 60 seconds between tries
        - pipenv check || (sleep 60; pipenv check) || (sleep 60; pipenv check)

    - name: "black check"
      install:
        - pip install black==19.3b0
      script:
        - make black-check-local

    - name: "Unit Tests"
      before_script:
        - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        - sudo apt install ./google-chrome-stable_current_amd64.deb
        - CHROME_MAIN_VERSION=`google-chrome-stable --version | sed -E 's/(^Google Chrome |\.[0-9]+ )//g'`
        - CHROMEDRIVER_VERSION=`curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAIN_VERSION"`
        - curl "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip" -O
        - unzip chromedriver_linux64.zip -d ~/bin
        - ulimit -c unlimited -S       # enable core dumps
      install:
        - pip install pipenv codecov
        - pip install typed_python==0.1.1
        - pipenv lock --dev --requirements > dev-reqs.txt
        - pip install --requirement dev-reqs.txt
        - pip install --editable .  # install object_database in 'editable' form.
        - sudo apt-get install --assume-yes gdb  # install gdb
        - make testcert.cert
        - make node-install
        - make build-js
      script:
        - coverage erase
        - pytest
        - ls -la
        - coverage combine
        - make js-test
      after_success:
        - codecov
      after_failure:
        - PYTHON_EXECUTABLE=$(python3 -c "import sys; print(sys.executable)")
        - COREFILE=$(find . -maxdepth 1 -name "core*" | head -n 1) # find core file
        - if [[ -f "$COREFILE" ]]; then
              gdb -c "$COREFILE" $PYTHON_EXECUTABLE -ex "thread apply all bt" -ex "set pagination 0" -batch;
          fi
